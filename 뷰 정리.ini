- Reactivity
데이터의 변화를 감지해서 화면에 반영한다.
화면 조작에 대한 api나 속성을 제공
라이브러리에서 편하게 가져가고 편하게 관리해주는 게 Reactivity의 핵심

- 인스턴스
뷰로 개발할 때 필수로 생성해야하는 단위이자 인스턴스 안에 내용을 추가함으로써
화면을 조작해 나갈 수 있다.

- 컴포넌트
화면의 영역을 구분해서 개발하는 방식
컴포넌트 개발이 프론트 프레임 워크에서 중요한 개념이다.
대부분 ui가 컴포넌트기반으로 개발이 되어있고 컴포넌트 기반으로 개발했을 때
재사용성 코드의 반복을 줄인다.

- 컴포넌트 통신
컴포넌트로 개발했을 때 데이터의 흐름을 정하기 위한 데이터의 규칙들을 제한한다.
제한하면서 생기는 이점은 여러명이 같이 개발해도 서로 데이터의 흐름을 예측할 수 있다.
  - props 상위에서 하위로 데이터를 내리는 것
  - event emit 하위에서 상위로 이벤트를 올리는 것

- HTTP 통신 라이브러리 (axios)
axios가 가장 대중적으로 쓰인다.
axios의 활용은 깃허브에서 기타 api나 옵션들을 확인하면 된다.

- 템플릿 문법
화면을 조작하기 위한 vue 문법이다.
  - 데이터        바인딩 데이터 변화에 따라서 화면에 반영해주는 것
  - 뷰 디렉티브   화면을 조작하기 위해서 vue가 추가적으로 제공하는 문법 (v-로 시작되는 속성)

- Vue CLI
프로젝트 생성할 때 명령어를 통해 생성하는 방식

- 싱글 파일 컴포넌트
.vue 파일을 학습해왔고 어떻게 돌아가는지는 웹펙 공식문서 참고
https://vuejs.org/v2/guide/index.html  <- 공식 문서

Vuex, Vue Router도 문서를 참고해 구현해보는 것도 좋다.